generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  person    Person?
  
  @@map("users")
}

model Person {
  id            String        @id @default(cuid())
  name          String
  email         String?       @unique
  phone         String?
  address       String?
  birthDate     DateTime?
  gender        Gender?
  maritalStatus MaritalStatus?
  baptized      Boolean       @default(false)
  member        Boolean       @default(false)
  active        Boolean       @default(true)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?       @unique
  groupMembers  GroupMember[]
  attendances   Attendance[]
  offerings     Offering[]

  @@map("people")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  leaderId    String?
  meetingDay  String?
  meetingTime String?
  location    String?
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  members     GroupMember[]

  @@map("groups")
}

model GroupMember {
  id       String @id @default(cuid())
  groupId  String
  personId String
  joinedAt DateTime @default(now())

  // Relations
  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([groupId, personId])
  @@map("group_members")
}

model Service {
  id          String       @id @default(cuid())
  name        String
  date        DateTime
  startTime   String?
  endTime     String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  attendances Attendance[]
  offerings   Offering[]

  @@map("services")
}

model Attendance {
  id        String   @id @default(cuid())
  serviceId String
  personId  String
  present   Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  person  Person  @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([serviceId, personId])
  @@map("attendances")
}

model Offering {
  id          String        @id @default(cuid())
  amount      Decimal       @db.Decimal(10, 2)
  date        DateTime      @default(now())
  source      OfferingSource
  description String?
  serviceId   String?
  personId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  service Service? @relation(fields: [serviceId], references: [id])
  person  Person?  @relation(fields: [personId], references: [id])

  @@map("offerings")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  startTime   String?
  endTime     String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("events")
}

enum Role {
  ADMIN
  PASTOR
  LEADER
  TREASURER
  SECRETARY
  MEMBER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum OfferingSource {
  CASH
  TRANSFER
  PIX
  CARD
  CHECK
}
