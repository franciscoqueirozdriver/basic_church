// Prisma schema — Igreja App

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // APP usa pool (porta 6543) => DATABASE_URL
  url       = env("DATABASE_URL")
  // MIGRATIONS/SEED usam conexão direta (porta 5432) => DIRECT_URL
  directUrl = env("DIRECT_URL")
}

// ===== Enums =====
enum Role {
  ADMIN
  PASTOR
  TESOURARIA
  COORD_GRUPOS
  RECEPCAO
  MEMBRO
}

enum Gender {
  MASCULINO
  FEMININO
  OUTRO
}

enum MaritalStatus {
  SOLTEIRO
  CASADO
  DIVORCIADO
  VIUVO
  UNIAO_ESTAVEL
}

enum AttendanceStatus {
  PRESENTE
  AUSENTE
  JUSTIFICADO
}

enum ServiceType {
  CULTO
  CELULA
  EVENTO
  REUNIAO
}

enum OfferingOrigin {
  CULTO
  CELULA
  CAMPANHA
  DIZIMO
  OFERTA
}

enum PaymentMethod {
  DINHEIRO
  CARTAO
  PIX
  TRANSFERENCIA
}

enum PixStatus {
  PENDING
  PAID
  EXPIRED
  CANCELLED
}

enum GroupType {
  CELULA
  MINISTERIO
  DEPARTAMENTO
  CLASSE
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  OPENED
}

enum MessageProvider {
  MAILGUN
  WHATSAPP
}

// ===== Models =====
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  role        Role      @default(MEMBRO)
  personId    String?   @unique
  person      Person?   @relation(fields: [personId], references: [id], onDelete: SetNull)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  isActive    Boolean   @default(true)

  // Audit
  createdBy   String?
  updatedBy   String?

  // Relations
  auditLogs   AuditLog[]

  @@map("users")
  @@index([role])
}

model Person {
  id                 String            @id @default(cuid())
  firstName          String
  lastName           String
  fullName           String
  email              String?           @unique
  phone              String?
  birthDate          DateTime?
  gender             Gender?
  maritalStatus      MaritalStatus?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  photo              String?
  notes              String?
  isActive           Boolean           @default(true)
  joinDate           DateTime?
  baptismDate        DateTime?
  membershipDate     DateTime?

  // Family
  householdId        String?
  household          Household?        @relation(fields: [householdId], references: [id], onDelete: SetNull)

  // User
  user               User?

  // Timestamps
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdBy          String?
  updatedBy          String?

  // Relations
  attendances        Attendance[]
  groupMembers       GroupMember[]
  groupAttendances   GroupAttendance[]
  donations          Donation[]
  eventRegistrations EventRegistration[]
  volunteers         Volunteer[]
  messageRecipients  MessageRecipient[]
  ledGroups          Group[]           @relation("GroupLeader")

  @@map("people")
  @@index([householdId])
  @@index([fullName])
}

model Household {
  id        String   @id @default(cuid())
  name      String
  address   String?
  city      String?
  state     String?
  zipCode   String?
  phone     String?
  notes     String?
  isActive  Boolean  @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  // Relations
  members   Person[]

  @@map("households")
}

model Service {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        ServiceType
  date        DateTime
  startTime   DateTime
  endTime     DateTime?
  location    String?
  capacity    Int?
  isActive    Boolean     @default(true)

  // Campus
  campusId    String?
  campus      Campus?     @relation(fields: [campusId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  updatedBy   String?

  // Relations
  attendances Attendance[]
  offerings   Offering[]

  @@map("services")
  @@index([campusId, date])
}

model Attendance {
  id        String           @id @default(cuid())
  personId  String
  serviceId String
  status    AttendanceStatus @default(PRESENTE)
  notes     String?

  person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([personId, serviceId])
  @@map("attendances")
  @@index([serviceId])
  @@index([personId])
}

model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        GroupType
  capacity    Int?
  location    String?
  meetingDay  Int?      // 0-6
  meetingTime String?   // HH:MM
  isActive    Boolean   @default(true)

  // Leader
  leaderId    String?
  leader      Person?   @relation("GroupLeader", fields: [leaderId], references: [id], onDelete: SetNull)

  // Campus
  campusId    String?
  campus      Campus?   @relation(fields: [campusId], references: [id], onDelete: SetNull)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?
  updatedBy   String?

  // Relations
  members     GroupMember[]
  attendances GroupAttendance[]

  @@map("groups")
  @@index([leaderId])
  @@index([campusId])
  @@index([type, isActive])
}

model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  personId  String
  joinDate  DateTime @default(now())
  isActive  Boolean  @default(true)

  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([groupId, personId])
  @@map("group_members")
  @@index([groupId])
  @@index([personId])
}

model GroupAttendance {
  id        String           @id @default(cuid())
  groupId   String
  personId  String
  date      DateTime
  status    AttendanceStatus @default(PRESENTE)
  notes     String?

  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([groupId, personId, date])
  @@map("group_attendances")
  @@index([groupId])
  @@index([personId])
  @@index([date])
}

model Offering {
  id            String        @id @default(cuid())
  date          DateTime
  origin        OfferingOrigin
  method        PaymentMethod
  amount        Int           // em centavos
  description   String?
  notes         String?

  // Service
  serviceId     String?
  service       Service?      @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  // Campus
  campusId      String?
  campus        Campus?       @relation(fields: [campusId], references: [id], onDelete: SetNull)

  // PIX
  pixTxId       String?       @unique
  pixStatus     PixStatus?
  pixQrCode     String?
  pixCopyPaste  String?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String?
  updatedBy     String?

  donations     Donation[]

  @@map("offerings")
  @@index([date])
  @@index([campusId])
  @@index([serviceId])
}

model Donation {
  id            String        @id @default(cuid())
  personId      String
  offeringId    String?
  amount        Int
  method        PaymentMethod
  date          DateTime
  description   String?
  notes         String?

  receiptNumber String?       @unique
  receiptUrl    String?

  person        Person        @relation(fields: [personId], references: [id], onDelete: Cascade)
  offering      Offering?     @relation(fields: [offeringId], references: [id], onDelete: SetNull)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String?
  updatedBy     String?

  @@map("donations")
  @@index([personId])
  @@index([offeringId])
  @@index([date])
}

model Event {
  id           String   @id @default(cuid())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  location     String?
  capacity     Int?
  price        Int?
  isActive     Boolean  @default(true)

  campusId     String?
  campus       Campus?  @relation(fields: [campusId], references: [id], onDelete: SetNull)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
  updatedBy    String?

  registrations EventRegistration[]
  volunteers    Volunteer[]

  @@map("events")
  @@index([campusId])
  @@index([startDate])
}

model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  personId  String
  status    String   @default("CONFIRMED")
  notes     String?

  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([eventId, personId])
  @@map("event_registrations")
  @@index([eventId])
  @@index([personId])
}

model Volunteer {
  id        String   @id @default(cuid())
  eventId   String
  personId  String
  role      String
  notes     String?

  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([eventId, personId])
  @@map("volunteers")
  @@index([eventId])
  @@index([personId])
}

model Campus {
  id        String    @id @default(cuid())
  name      String
  address   String?
  city      String?
  state     String?
  zipCode   String?
  phone     String?
  isActive  Boolean   @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?

  services  Service[]
  groups    Group[]
  offerings Offering[]
  events    Event[]

  @@map("campuses")
  @@index([name])
}

model MessageTemplate {
  id        String   @id @default(cuid())
  name      String
  subject   String?
  content   String
  type      String   // welcome, post_service, ...
  isActive  Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  messages  Message[]

  @@map("message_templates")
  @@index([name])
}

model Message {
  id          String          @id @default(cuid())
  templateId  String?
  subject     String?
  content     String
  provider    MessageProvider
  status      MessageStatus   @default(PENDING)
  scheduledAt DateTime?
  sentAt      DateTime?

  template    MessageTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String?
  updatedBy   String?

  recipients  MessageRecipient[]

  @@map("messages")
  @@index([templateId])
  @@index([status])
}

model MessageRecipient {
  id        String        @id @default(cuid())
  messageId String
  personId  String
  status    MessageStatus @default(PENDING)
  sentAt    DateTime?
  openedAt  DateTime?
  failedAt  DateTime?
  errorMsg  String?

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([messageId, personId])
  @@map("message_recipients")
  @@index([messageId])
  @@index([personId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // CREATE, UPDATE, DELETE
  table     String
  recordId  String
  oldData   Json?
  newData   Json?

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("audit_logs")
  @@index([table])
  @@index([userId])
}

model FeatureFlag {
  id        String   @id @default(cuid())
  name      String   @unique
  isEnabled Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feature_flags")
}

// ===== Church Configuration =====
model ChurchConfig {
  id            String   @id @default(cuid())

  // Basic Info
  churchName    String?
  description   String?

  // Logo
  logoUrl       String?
  logoWidth     Int?     @default(120)
  logoHeight    Int?     @default(40)
  logoPosition  String?  @default("header-left") // header-left, header-center, sidebar-top, sidebar-bottom

  // Colors
  primaryColor     String? @default("#3b82f6")
  secondaryColor   String? @default("#a855f7")
  accentColor      String? @default("#22c55e")
  backgroundColor  String? @default("#ffffff")
  textColor        String? @default("#1f2937")

  // Palette metadata
  colorPaletteSource String?
  logoColorAnalysis  Json?

  // Theme
  isDarkMode     Boolean @default(false)
  customCssVars  Json?

  // Contact
  address   String?
  phone     String?
  email     String?
  website   String?

  // Social
  facebook  String?
  instagram String?
  youtube   String?

  // System
  timezone  String? @default("America/Sao_Paulo")
  language  String? @default("pt-BR")
  currency  String? @default("BRL")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Audit
  createdBy String?
  updatedBy String?

  @@map("church_config")
}
